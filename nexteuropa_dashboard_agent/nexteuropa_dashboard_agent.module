<?php

/**
 * @file
 * Main module file for nexteuropa_dashboard_agent.
 */

/**
 * Implements hook_menu().
 */
function nexteuropa_dashboard_agent_menu() {
  $items = array();

  $items['admin/reports/nexteuropa-dashboard'] = array(
    'title' => 'Report for NextEuropa Dashboard',
    'description' => 'Output of the NextEuropa Dashboard agent module',
    'access callback' => 'nexteuropa_dashboard_agent_access_callback',
    'page callback' => 'nexteuropa_dashboard_agent_status_page',
    'file' => 'nexteuropa_dashboard_agent_status.page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/reports/user-login'] = array(
    'title' => 'One time user login for NextEuropa Dashboard',
    'description' => 'Returns a one time login link for the user account 1 (uid 1) or user "user_administrator".',
    'access callback' => 'nexteuropa_dashboard_agent_access_callback',
    'page callback' => 'nexteuropa_dashboard_agent_uli_page',
    'page arguments' => array(3),
    'file' => 'nexteuropa_dashboard_agent_uli.page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/nexteuropa-dashboard'] = array(
    'title' => 'NextEuropa Dashboard',
    'description' => 'Configuration for NextEuropa Dashboard agent.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexteuropa_dashboard_agent_form'),
    'file' => 'nexteuropa_dashboard_agent.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_site_status_alter().
 */
function nexteuropa_dashboard_agent_menu_site_status_alter(&$menu_site_status, $path) {
  if ($menu_site_status == MENU_SITE_OFFLINE
    && ((strpos($path, 'admin/reports/nexteuropa-dashboard') !== FALSE)
      || (strpos($path, 'admin/reports/user-login') !== FALSE))) {
    $menu_site_status = MENU_SITE_ONLINE;
  }
}

/**
 * Access callback: Verify the used token and the requester IP.
 *
 * @see nexteuropa_dashboard_agent_menu()
 */
function nexteuropa_dashboard_agent_access_callback() {
  global $user;

  if (current_path() == 'admin/reports/nexteuropa-dashboard'
    || current_path() == 'admin/reports/user-login') {
    drupal_page_is_cacheable(FALSE);
  }

  if ($user->uid == 1) {
    // Always allow the access to user 1.
    return TRUE;
  }

  if (!empty($_SERVER['HTTP_NETOKEN'])) {

    $provided_salt = drupal_substr($_SERVER['HTTP_NETOKEN'], 0, 4);
    $provided_hash = drupal_substr($_SERVER['HTTP_NETOKEN'], 4);
    $hash_of_temporary_token = _nexteuropa_dashboard_agent_get_hash_of_temporary_token($provided_salt);
    if ($provided_hash == $hash_of_temporary_token) {

      $allowed_ips = variable_get('nexteuropa_dashboard_agent_allowed_ip_range', NULL);
      if (empty($allowed_ips)) {
        watchdog(
          'nexteuropa_dashboard_agent',
          "Variable with allowed IP range isn't set. Request blocked.",
          array(),
          WATCHDOG_WARNING
        );
        return FALSE;
      }
      else {
        $allowed_ips = preg_replace('/\s+/', '', $allowed_ips);
        $allowed_ip_list = explode(',', $allowed_ips);
        // Compare current IP with the list of allowed IPs.
        foreach ($allowed_ip_list as $allowed_ip) {
          $allowed_ip_array = explode('-', $allowed_ip);
          list($lower, $upper) = $allowed_ip_array;
          $lower_dec = (float) sprintf("%u", ip2long($lower));
          $upper_dec = (!empty($upper)) ? (float) sprintf("%u", ip2long($upper)) : $lower_dec;
          $ip_dec = (float) sprintf("%u", ip2long(ip_address()));
          if (($ip_dec >= $lower_dec) && ($ip_dec <= $upper_dec)) {
            // Current IP is in the list of allowed IPs.
            // Allow the access.
            return TRUE;
          }
        }
        // If the execution reach this line,
        // this means current IP is not allowed.
        watchdog(
          'nexteuropa_dashboard_agent',
          "Requester IP *** %requester_ip *** is not allowed. Should be in the list *** %allowed_ips ***.",
          array(
            '%requester_ip' => ip_address(),
            '%allowed_ips' => $allowed_ips,
          ),
          WATCHDOG_WARNING
        );
        return FALSE;
      }
    }
    else {
      watchdog(
        'nexteuropa_dashboard_agent',
        "Provided hash *** %provided_hash *** doesn't match the generated one.",
        array('%provided_hash' => $provided_hash),
        WATCHDOG_WARNING
      );
      return FALSE;
    }
  }
  else {
    watchdog(
      'nexteuropa_dashboard_agent',
      "No access token provided.",
      array(),
      WATCHDOG_WARNING
    );
    return FALSE;
  }
}

/**
 * Stores a given token in private file directory.
 *
 * @param string $name
 *   The name of the token.
 * @param string $token
 *   The token to be stored.
 */
function _nexteuropa_dashboard_agent_set_token($name, $token) {
  file_unmanaged_save_data($token, 'private://' . $name, FILE_EXISTS_REPLACE);
}

/**
 * Retrieves a token stored in private file directory.
 *
 * @param string $name
 *   The name of the token.
 *
 * @return string
 *   'Error-no-token' when the token doesn't exist.
 */
function _nexteuropa_dashboard_agent_get_token($name) {
  $real_path = drupal_realpath('private://' . $name);
  $token = file_get_contents($real_path);

  if ($token !== FALSE) {
    return $token;
  }
  else {
    return 'Error-no-token';
  }
}

/**
 * Deletes a token stored in private file directory.
 *
 * @param string $name
 *   The name of the token.
 */
function _nexteuropa_dashboard_agent_remove_token($name) {
  file_unmanaged_delete('private://' . $name);
}

/**
 * Generates a cryptographic hash using a temporary string.
 *
 * The temporary string is composed with the passed salt, a shared token
 * and the current date.
 *
 * @param string $random_salt
 *   The random salt to use to compose the temporary token.
 *
 * @return string
 *   The cryptographic hash from the temporary token.
 */
function _nexteuropa_dashboard_agent_get_hash_of_temporary_token($random_salt) {
  $defined_token = _nexteuropa_dashboard_agent_get_token('nexteuropa_dashboard_agent_token');
  $temporary_token = $random_salt . $defined_token . date('Ymd');
  return hash('SHA512', $temporary_token);
}
